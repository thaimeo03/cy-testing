{
  "javascript": {
    "syntaxErrors": {
      "missingBracket": "if(2 == 2 return true",
      "invalidSyntax": "consts a = 2",
      "invalidOperatorUsage": "if(2 == 2) { return true } else { return false }",
      "typeCastingError": "const a = 2; const b = '3'; return a + b",
      "undeclaredVariable": "const a = 2; const b = 3; return a + b + c",
      "duplicateDeclaration": "const a = 2; const a = 3; return a",
      "wrongTemplate": "function threeSumClosestsss(nums, target) {\n            const a = 2; const b = 3; return a + b\n          };"
    },
    "runtimeErrors": {
      "stackOverflow": "function recursiveFunc(n) { return recursiveFunc(n + 1); }; return recursiveFunc(1);",
      "outOfBounds": "const arr = [1, 2, 3]; return arr[10].toString();",
      "divisionByZero": "const a = 10; const b = 0; return a / b;",
      "infiniteLoop": "let i = 0; while (true) { i++; }; return i;",
      "largeInputData": "const arr = new Array(1000000).fill(1); return arr.reduce((a, b) => a + b, 0);"
    },
    "logicError": "function threeSumClosest(nums, target) {\n    nums.sort((a, b) => a - b);\n    let sum = nums[0] + nums[1] + nums[2];\n\n    for (let i = 0; i < nums.length - 2; i++) {\n        let l = i + 1, r = nums.length - 1;\n\n        while (l < r) {\n            const curSum = nums[i] + nums[l] + nums[r];\n            if (Math.abs(curSum - target) < Math.abs(sum - target)) {\n                sum = curSum;\n            }\n\n            if (curSum > target) r--;\n            else l++;\n        }\n    }\n\n    return sum;\n}\n",
    "templateCode": "function threeSumClosest(nums, target) {\n  {{content}}\n};"
  }
}
